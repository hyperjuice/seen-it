# ADMIN User Account

User.create!([
  {first_name: nil, last_name: nil, profile_name: nil, email: "pln2bz@vireo.net", encrypted_password: "$2a$10$1WosUHld0s/R20cN9dVwc.8xZVTHh68Dikwvfvt9PR/71b1/T3Fqy", reset_password_token: nil, reset_password_sent_at: nil, remember_created_at: nil, sign_in_count: 1, current_sign_in_at: "2015-05-12 19:10:15", last_sign_in_at: "2015-05-12 19:10:15", current_sign_in_ip: "::1", last_sign_in_ip: "::1"}
])




# TAGS

Tag.create!([
  {category: "non-technical", post_id: 1},
  {category: "general", post_id: nil},
  {category: "algorithms", post_id: 94},
  {category: "data structures", post_id: 94}
])




# INTERVIEW QUESTIONS (aka Posts)

# codingforinterviews.com site
# Note that the format is in HTML and the question
# content may require some editing.  Also note that
# Issue 12: Max Consecutive Sum did not capture

Post.create!([
  {name: "Issue 1: Binary Search Trees", content: "\n\n<p><img src=\"/assets/email/bst-ecb2448554d262e1449ded33aa0c8b5b.png\" alt=\"\"></p>\n\n<h2>Why review binary search trees?</h2>\n\n<p>From a piece on <a href=\"http://dandreamsofcoding.com/2012/11/25/how-to-prepare-for-technical-interviews/\">preparing for technical interviews by Dan Blumenthal</a>, Director of Engineering at TripAdvisor:</p>\n\n<p><em>\"Basic data structures and algorithms are favorite sources for interview questions. Arrays, Linked Lists, *</em>Binary Search Trees*<em>, Hash Tables, Sets, and Graphs show up all the time\"</em></p>\n\n<h2>What you need to know</h2>\n\n<p>A binary search tree (<a href=\"http://www.amazon.com/gp/product/0262033844/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0262033844&amp;linkCode=as2&amp;tag=a200-20\">CLRS chapter 12</a>) is a data structure that can provide O(log(n)) worst-case complexity for element insertion, search and deletion.</p>\n\n<p>How do BSTs accomplish this O(log(n)) performance? By doing two things: (1) maintaining the <em>ordering invariant</em>—<strong>at any node <em>n</em> in the tree with key <em>k</em>, all keys of the elements in <em>n</em>'s left subtree are strictly less than <em>k</em>, while all keys of the elements in <em>n</em>'s right subtree are strictly greater than *k</strong>*, and (2) keeping the tree's max height .</p>\n\n<p>Some important attributes of these trees:</p>\n\n<ul>\n<li>BST keys must be unique—no duplicates</li>\n<li>BST keys must be comparable</li>\n<li>O(log(n)) worst-case performance requires</li>\n</ul>\n\n<p>Here are some steps you should take toward gaining a deep understanding of binary search trees:</p>\n\n<p><a href=\"http://www.youtube.com/watch?v=V_3BM0ykITM\" target=\"_blank\"><img src=\"/assets/email/bst-lecture-5432c7c741e673e1b0f76f7d31ff8205.png\" border=\"0\" style=\"width:450;\"></a></p>\n\n<ol>\n<li>If you have never heard of Binary Search Trees, you should set aside the 45 minutes to watch this <a href=\"http://www.youtube.com/watch?v=V_3BM0ykITM\">UC Berkeley video lecture on Binary Search Trees</a> or read these <a href=\"http://www.cs.cmu.edu/%7Ewlovas/15122-r11/lectures/17-bst.pdf\">course notes</a> from a CMU lecture.</li>\n<li>Look up at least two ways of maintaining a balanced binary search tree—that's how you get the O(log(n)) operation performance. Start with <a href=\"http://en.wikipedia.org/wiki/Self-balancing_binary_search_tree#Implementations\">this Wikipedia article</a> as a jumping off point, <strong>AVL trees</strong> and <strong>red-black</strong> trees are good choices to focus on.</li>\n<li>Do this week's problem!</li>\n</ol>\n\n<h1>Problem of the week</h1>\n\n<p>We're having so much fun with binary search trees already, why stop!   Questions similar to this week's problem have been <a href=\"http://www.glassdoor.com/Interview/binary-search-tree-interview-questions-SRCH_KT0,18.htm\">spotted at both Google and Amazon</a>.</p>\n\n<p>For this week, complete these tasks:</p>\n\n<ol>\n<li>Explain what a binary search tree is and what to consider when implementing one.</li>\n<li>\n<strong>Write a function that returns whether a given binary tree is a valid binary search tree</strong>. Use your favorite programming language. For extra credit, write your response on paper or your <a href=\"http://www.amazon.com/gp/product/B0002LCU1Y/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B0002LCU1Y&amp;linkCode=as2&amp;tag=a200-20\">gigantic Mark Zuckerberg-approved whiteboard</a>. You likely won't have an IDE at your next interview.</li>\n</ol>\n\n", user_id: nil, difficulty: "", link: "http://codingforinterviews.com/archive/paradigmsareconstructed@gmail.com-1bc404/issue/1", tag_id: nil},

  {name: "Issue 2: Merge Sort", content: "\n\n<p><a href=\"/assets/email/mergesort-animated-1ce783200b440a90dc1ba2c11dfc2e2a.gif\" target=\"_blank\"><img src=\"/assets/email/mergesort-animated-1ce783200b440a90dc1ba2c11dfc2e2a.gif\" border=\"0\" style=\"width:400;\"></a></p>\n\n<h2>Why review merge sort?</h2>\n\n<p>From a piece on <a href=\"http://dandreamsofcoding.com/2012/11/25/how-to-prepare-for-technical-interviews/\">preparing for technical interviews by Dan Blumenthal</a>, Director of Engineering at TripAdvisor:</p>\n\n<p><em>\"You’ll likely be asked about algorithms and complexity theory. If someone asks you to name a sorting algorithm, \"bubble sort\" shouldn’t be your first answer.\"</em></p>\n\n<p>A quick Google search reveals that sorting and merging questions have been spotted at Amazon, Palantir and Twitter.</p>\n\n<h2>What you need to know</h2>\n\n<p><strong>Merge sort</strong> (<a href=\"http://www.amazon.com/gp/product/0262033844/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0262033844&amp;linkCode=as2&amp;tag=a200-20\">CLRS chapter 2</a>) is one of the few sorting algorithms you may need to implement during a coding interview. Other likely candidates are quicksort and insertion sort, which will be covered in future emails.</p>\n\n<p>The concept is simple: Define a recursive function that (1) <strong>divides an array in half</strong>, (2) calls itself to <strong>sort both halves separately</strong>, and (3) <strong>merges the two resultant arrays</strong> after. Once the two sorted halves have been shuffled together, return the resulting array.</p>\n\n<p>Some things to keep in mind:</p>\n\n<ul>\n<li>The average and worst-case time complexities of merge sort are O(n log n). If you have a pre-processing check to see if the list is already sorted, you could have a best case of O(n). But in the words of MIT professor Charles Leiserson, best cases are pretty \"bogus\".</li>\n<li>Merge sort implementations are usually broken up into two distinct parts: (1) a recursive <tt>mergeSort</tt> function, and (2) a simple array-merging <tt>merge</tt> function.</li>\n<li>Sorting, in general, takes at least O(n log n) time—the fastest sorting algorithm in existence that handles arbitrary data would take O(n log n) time.</li>\n</ul>\n\n<p>Here are some steps you should take toward gaining a deep understanding of merge sort:</p>\n\n<p><a href=\"http://www.youtube.com/watch?v=JPyuH4qXLZ0#t=17m11s\" target=\"_blank\"><img src=\"/assets/email/mergesort-lecture-6addf8a6b6fac662a6b4c214476d51d9.png\" border=\"0\" style=\"width:450;\"></a></p>\n\n<ol>\n<li>If you have never heard of Merge Sort, you should set aside the 50 minutes to watch this <a href=\"http://www.youtube.com/watch?v=JPyuH4qXLZ0#t=17m11s\">MIT Charles Leiserson video lecture on Merge Sort</a> or read these <a href=\"http://www.cs.mcgill.ca/%7Edprecup/courses/IntroCS/Lectures/comp250-lecture11.pdf\">course notes</a> from a McGill lecture.</li>\n<li>Read about the time / space complexity tradeoffs of merge sort, (and check out those merge sort animations!): <a href=\"http://www.sorting-algorithms.com/merge-sort\">http://www.sorting-algorithms.com/merge-sort</a>\n</li>\n<li>Look up how to do a merge sort in-place, without using any extra memory.</li>\n</ol>\n\n<h1>Problem of the week - <em><font color=\"red\">Holiday</font> <font color=\"green\">Edition</font></em>\n</h1>\n\n<p>We're having so much fun merging arrays of numbers, why stop now!</p>\n\n<p>For this week, complete these tasks:</p>\n\n<ol>\n<li>Explain what merge sort is and what to consider when implementing it.</li>\n<li>Explain how <strong><font color=\"red\">Santa Claus</font></strong> might use merge sort to help with <strong><font color=\"green\">Christmas</font></strong> (extra points for mental gymnastics).</li>\n<li>\n<strong>Write a function that merges an array of already sorted arrays, producing one large, still sorted array</strong>. Use your favorite programming language. For extra credit, write your response on paper or your <a href=\"http://www.amazon.com/gp/product/B0002LCU1Y/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B0002LCU1Y&amp;linkCode=as2&amp;tag=a200-20\">gigantic Mark Zuckerberg-approved whiteboard</a>. You likely won't have an IDE at your next interview.</li>\n</ol>\n\n<p>For example, your input might be:</p>\n\n<pre><code>[[0, 5, 8, 9], [1, 2, 7], [10]]\n</code></pre>\n\n<p>And you should return:</p>\n\n<pre><code>[0, 1, 2, 5, 7, 8, 9, 10]\n</code></pre>\n\n<p>Give it a spin, write some code, <strong>limit yourself to one hour</strong> and submit your code. There are a few different approaches you could take to organize your solution.</p>\n\n<p>What is the runtime complexity of your solution? How about space? Do you think there could be faster or more space efficient solutions?</p>\n\n", user_id: nil, difficulty: "", link: "http://codingforinterviews.com/archive/paradigmsareconstructed@gmail.com-1bc404/issue/2", tag_id: nil},

  {name: "Issue 3: Linked Lists", content: "\n\n<p><img src=\"http://i.imgur.com/Zj9UK.png\" border=\"0\" style=\"width:400;\"></p>\n\n<h2>Why review linked lists?</h2>\n\n<p>Linked lists show up in many programming interviews—often you will be asked to implement a variation of the standard linked list data structure or perform a more interesting operation on a simple linked list.</p>\n\n<h2>What you need to know</h2>\n\n<p>A <strong>linked list</strong> (<a href=\"http://www.amazon.com/gp/product/0262033844/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0262033844&amp;linkCode=as2&amp;tag=a200-20\">CLRS section 10.2</a>) is a data structure in which objects are arranged in a linear order. While arrays maintain a linear ordering through its indices, linked lists store their ordering with a pointer field <code>next</code> in each object.</p>\n\n<p>The simple singly-linked list consists of <strong>nodes</strong> with two fields:</p>\n\n<ol>\n<li>A <code>key</code>\n</li>\n<li>A pointer <code>next</code> to the next node, or to <code>NIL</code> if it's the tail node</li>\n</ol>\n\n<p>Doubly linked lists add one more field: a pointer to the <em>previous</em> node, often named <code>prev</code>.</p>\n\n<p><img src=\"http://i.imgur.com/ZhCKI.png\" border=\"0\" style=\"width:400;\"></p>\n\n<p>The linked-list itself often keeps track of the <code>head</code> node and provides various operations:</p>\n\n<ul>\n<li>\n<code>search(key)</code> - O(n) - which returns the found node with that <code>key</code> or <code>NIL</code> if not found</li>\n<li>\n<code>insert(x)</code> - O(1) - which splices node <code>x</code> onto the front of the list</li>\n<li>\n<code>delete(x)</code> - O(1) - which splices node <code>x</code> out of the list. Assuming the list is doubly-linked, this is usually done by re-setting the pointers of <code>x</code>'s <code>prev</code> and <code>next</code> elements to point to each other</li>\n<li>\n<code>delete(key)</code> - O(n) - which runs the O(n) search(key) then the O(1) delete(x)</li>\n</ul>\n\n<p>There are a few variations on the linked list you should be aware of:</p>\n\n<ol>\n<li>Single or double - if a list is singly-linked, there is only a <code>next</code> pointer. If it is doubly-linked, there are <strong>both</strong> <code>prev</code> and <code>next</code> pointers.</li>\n<li>Sorted or unsorted - a sorted linked list maintains an ordering of node <code>key</code>s</li>\n<li>Circular - a list in which the <code>next</code> pointer of the list's <code>tail</code> element points to the <code>head</code> element</li>\n<li>Separate classes for lists and nodes (as described above) or just nodes - sometimes defining a linked list <code>Node</code> class is all you'll need for an interview question, so it's unnecessary to go through the trouble of defining a <code>List</code> class</li>\n</ol>\n\n<p>If you are prompted to implement or perform operations on linked list in an interview, be sure you clarify what variation of the data structure you are dealing with.</p>\n\n<p>Some things to keep in mind:</p>\n\n<ul>\n<li>If you need to iterate through the linked list of size <code>n</code> to find an element during an operation, your operation will be at least O(n)</li>\n<li>Things that can speed up your operations: making your list doubly-linked, maintaining a <code>tail</code> pointer, </li>\n</ul>\n\n<h2>Steps to a more comprehensive understanding</h2>\n\n<p><a href=\"http://www.youtube.com/watch?v=htzJdKoEmO0\" target=\"_blank\"><img src=\"http://i.imgur.com/keVEL.png\" border=\"0\" style=\"width:450;\"></a></p>\n\n<ol>\n<li>If you have never heard of Linked Lists, you should set aside the 52 minutes to watch this <a href=\"http://www.youtube.com/watch?v=htzJdKoEmO0\">UC Berkeley lecture on linked lists</a> or read these <a href=\"http://www.cs.cornell.edu/courses/cs2110/2011fa/Lectures/L06-Lists/L06-Lists.pdf\">lecture notes</a> from a Cornell course</li>\n<li>Do some reading online about Sentinel nodes (<a href=\"http://en.wikipedia.org/wiki/Sentinel_node\">Wikipedia</a>, <a href=\"http://stackoverflow.com/questions/5384358/how-does-a-sentinel-node-offer-benefits-over-null\">Stack Overflow</a>) and figure out why they might be useful in certain circumstances</li>\n<li>Read about the <a href=\"http://en.wikipedia.org/wiki/Linked_list#Tradeoffs\">tradeoffs between linked lists and other data structures</a>.</li>\n</ol>\n\n<h1>Problem of the week - linked list lightning round</h1>\n\n<p>We're having so much fun with linked lists, why stop now!</p>\n\n<p>For this week, complete these tasks:</p>\n\n<ol>\n<li>Explain what a linked list is and what to consider when implementing one.</li>\n<li>Implement a simple singly-linked list data structure in your favorite language.</li>\n</ol>\n\n<p>Then, implement two of the three following linked list interview questions:</p>\n\n<ol>\n<li>Write a function to remove a list's 3rd from last element. <strong>Challenge</strong>: can you do it in a single list traversal?</li>\n<li>Write a function to remove all duplicates from a linked list. <strong>Challenge</strong>: can you do it without storing any extra data?</li>\n<li>Write a function to detect a loop in a linked list.</li>\n</ol>\n\n<p>Spend no more than one hour attempting these problems. The challenge followups are a bit tricky, but see if you can come up with the solution to them on your own.</p>\n\n<p>If not, feel free to look up approaches to the challenge portions and implement them anyway. Often interviewers will guide you to the insight required if you don't get it on your own, just to see if you can understand it and implement it anyway.</p>\n\n", user_id: nil, difficulty: "", link: "http://codingforinterviews.com/archive/paradigmsareconstructed@gmail.com-1bc404/issue/3", tag_id: nil},

  {name: "Issue 4: DFS / Tree Traversals", content: "\n\n<p><img src=\"http://i.imgur.com/MTcd7.gif\" border=\"0\"></p>\n\n<h2>Why review tree traversal?</h2>\n\n<p><strong>Trees and tree traversals</strong> show up in a surprisingly large number of job interviews. Even if you have a good understanding of the basic tree traversal algorithms, practicing hands-on with tree algorithms can make you more comfortable when they are a part of more complex problems.</p>\n\n<h2>What you need to know</h2>\n\n<p>Depth-first <strong>tree traversals</strong> (<a href=\"http://www.amazon.com/gp/product/0262033844/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0262033844&amp;linkCode=as2&amp;tag=a202-20\">covered in CLRS section 12.1</a>) are methods for visiting each node in a tree exactly once.</p>\n\n<h3>The big three methods for depth-first tree traversal</h3>\n\n<p>The big three tree traversal methods are simple to remember when defined recursively, and their names are well-known—fair game for interviews, so be sure to know them.</p>\n\n<h4>Pre-order (root before)</h4>\n\n<ol>\n<li>\n<strong>Visit</strong> (e.g., print or modify) the root.</li>\n<li>Traverse the <strong>left</strong> subtree pre-order.</li>\n<li>Traverse the <strong>right</strong> subtree pre-order.</li>\n</ol>\n\n<h4>In-order (root in the middle)</h4>\n\n<ol>\n<li>Traverse the <strong>left</strong> subtree in-order.</li>\n<li>\n<strong>Visit</strong> the root.</li>\n<li>Traverse the <strong>right</strong> subtree in-order.</li>\n</ol>\n\n<h4>Post-order (root after)</h4>\n\n<ol>\n<li>Traverse the <strong>left</strong> subtree post-order.</li>\n<li>Traverse the <strong>right</strong> subtree post-order.</li>\n<li>\n<strong>Visit</strong> the root.</li>\n</ol>\n\n<h3>Usage</h3>\n\n<p><strong>Pre-order</strong> traversal is sometimes used to <em>copy</em> a binary search tree—create the root node and then attach the copied children. <strong>In-order</strong> traversal is commonly used to print out binary search tree nodes in their specified order.</p>\n\n<h3>Implementing</h3>\n\n<p>Tree traversal algorithms are usually implemented recursively—you might notice how the traversal definitions above reference themselves.</p>\n\n<p>Pseudo-code for pre-order traversal (<a href=\"http://en.wikipedia.org/wiki/Tree_traversal#Pre-order\">via Wikipedia</a>):</p>\n\n<pre><code>preorder(node):\n  if node == null then return\n  visit(node)\n  preorder(node.left)\n  preorder(node.right)\n</code></pre>\n\n<p>If you are prompted to implement or perform operations on tree in an interview, be sure you clarify what variation of the data structure you are dealing with. We covered <strong>binary search trees</strong> a few weeks ago—clarify whether something is a binary search tree or not before jumping in on writing a solution. There may be optimizations or tricky solutions that are possible if it's a binary search tree.</p>\n\n<h3>Time and space</h3>\n\n<p>These traversal methods visit each node only once—O(n) time complexity.</p>\n\n<p>In terms of space, the recursive (and most iterative) solutions require space on the call stack, to the tune of O(tree height). In a balanced tree, that space complexity will be O(log n). <a href=\"http://www.geeksforgeeks.org/inorder-tree-traversal-without-recursion-and-without-stack/\">There are algorithms</a> to traverse a tree without a stack or recursion, but I suspect you won't be asked that in an interview.</p>\n\n<h2>Steps to a more comprehensive understanding</h2>\n\n<p><a href=\"http://www.youtube.com/watch?v=evwGnROlB58\" target=\"_blank\"><img src=\"http://i.imgur.com/bPryz.png\" border=\"0\" style=\"width:450;\"></a></p>\n\n<ol>\n<li>If you haven't previously learned about or implemented tree traversal methods, you should set aside the 54 minutes to watch this <a href=\"http://www.youtube.com/watch?v=evwGnROlB58\">UC Berkeley lecture on trees and traversals</a> or read these <a href=\"http://ocw.mit.edu/courses/civil-and-environmental-engineering/1-204-computer-algorithms-in-systems-engineering-spring-2010/lecture-notes/MIT1_204S10_lec06.pdf\">lecture notes</a> from an MIT civil and environmental engineering course, starting at slide #11</li>\n<li>Take a look at some <a href=\"http://en.wikipedia.org/wiki/Tree_traversal#Pre-order\">iterative implementations</a> of tree traversals. Ponder why you need to use a stack to implement this iteratively.</li>\n</ol>\n\n<h1>Problem of the week - Tree Traversal</h1>\n\n<p>We're having so much fun with depth-first tree traversal methods, why stop now!</p>\n\n<p>For this week, complete these tasks:</p>\n\n<ol>\n<li>\n<strong>Explain what the big three depth-first tree traversals are</strong> and what to consider when implementing them.</li>\n<li>Implement a simple binary (<em>non-search</em>) tree node data structure in your favorite programming language and write the following methods: (1) print nodes pre-order, (2) print nodes in-order, (3) print nodes post-order.</li>\n<li>Write a function that, given two nodes and a tree root, finds the two nodes' <strong>lowest common ancestor</strong>. That is, the function should find the ancestor that both nodes share that is furthest away from the root.</li>\n</ol>\n\n<p>Start out trying #3 allowing each node to have a pointer to its parent. <strong>Challenge</strong>: can you do it without parent pointers? What would the time and space complexities be for your implementations?</p>\n\n", user_id: nil, difficulty: "", link: "http://codingforinterviews.com/archive/paradigmsareconstructed@gmail.com-1bc404/issue/4", tag_id: nil},

  {name: "Issue 5: Tries", content: "\n\n<p><img src=\"http://i.imgur.com/GVZRS1A.png\" border=\"0\"></p>\n\n<h2>Why review tries?</h2>\n\n<p><strong>Tries</strong>, pronounced like the word \"try\", show up in a surprisingly large number of programming interview problems—usually in text processing situations. The term trie comes from the word re<strong>trie</strong>val.</p>\n\n<h2>What you need to know</h2>\n\n<p><strong>Tries</strong>, or <strong>prefix trees</strong> (<a href=\"http://www.amazon.com/gp/product/0262033844/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0262033844&amp;linkCode=as2&amp;tag=a202-20\">covered briefly in CLRS section 14</a>) are a special kind of tree used in situations where there is a lot of overlap between keys.</p>\n\n<p>Imagine you are tasked with storing the entire English language dictionary and performing <strong>word auto-completion based on it</strong>.</p>\n\n<p>Notice there is a lot of overlap in certain words: <strong>cat</strong>, <strong>catalog</strong>, <strong>cat</strong>atonic, <strong>cat</strong>ty.</p>\n\n<p>Storing the entire dictionary in a hash map from <tt>{\"word\" =&gt; true}</tt> could work for checking whether a given word is <em>in</em> the dictionary, but in certain problems it is essential to work with keys at the sub-string level.</p>\n\n<p>In the auto-completion situation, you could construct a tree structure with each letter of a word pointing to its next letter. When you hit the end of a word, you mark the node as a valid word stopping point. In doing so, you would be constructing a <strong>trie</strong>.</p>\n\n<h3>Construct and find</h3>\n\n<p>To <strong>construct</strong> a simple trie (or prefix tree):</p>\n\n<ol>\n<li>For each key, deconstruct your key <code>k</code> (usually your dictionary word) into a sequence of subkeys. For example, <code>\"catatonic\"</code> could become <code>\"c\", \"a\", \"t\", \"a\", \"t\", \"o\", \"n\", \"i\", \"c\"</code>.</li>\n<li>Starting from the root, for each remaining subkey, create and enter a new child node.</li>\n<li>When you are out of subkeys, mark the final, deepest node as a valid key.</li>\n</ol>\n\n<p>To perform a <strong>search</strong> on a trie:</p>\n\n<ol>\n<li>For each subkey (or letter), enter the child node for that subkey. If there is none, the search has failed.</li>\n<li>Once you're out of subkeys, if the node is marked as a valid key ending point, <strong>do something</strong>.</li>\n</ol>\n\n<p>In a simple dictionary spell checker <code>is_valid_word</code> search, that <strong>something</strong> might just be returning true, or returning the word stored as the node's value.</p>\n\n<p>In the case of a word auto-completer, you might perform a search of child nodes to find a valid word to suggest for auto-completion. You might even make your search take word usage frequency into account to make your suggestions even better (<a href=\"http://www.damnyouautocorrect.com/\">or, in Apple's case, worse?</a>).</p>\n\n<p></p>\n<center><img src=\"http://i.imgur.com/3oxtnXv.png\" style=\"width:200px\"></center>\n\n<h3>Usage</h3>\n\n<p>Tries are often used for autocomplete dictionaries and spell checkers, and a special type of trie known as a suffix tree (which Knuth crowned as \"Algorithm of the Year 1973\") can be used to power full-text search. Tries also often show up in bioinformatics algorithms.</p>\n\n<h2>Steps to a more comprehensive understanding</h2>\n\n<p></p>\n<center><a href=\"http://www.youtube.com/watch?v=BXeIu54mUg0\" target=\"_blank\"><img src=\"http://i.imgur.com/tcgIydq.png\" border=\"0\" style=\"width:450;\"></a></center>\n\n<ol>\n<li>If you haven't previously learned about or implemented tries, you should crank your computer's volume all the way up and set aside the 12 minutes to watch this <a href=\"http://www.youtube.com/watch?v=BXeIu54mUg0\">video on implementing a Trie in Python</a> or read these <a href=\"https://docs.google.com/viewer?a=v&amp;q=cache:8XKCBkvNg7EJ:www.cs.umd.edu/class/fall2005/cmsc132/lecs/lec29.ppt+&amp;hl=en&amp;gl=us&amp;pid=bl&amp;srcid=ADGEEShrbk7k3iMT7ZA3V4CYBVrfCx1LJE-yKc7RyokpFa30jBXly0wYT3eBmkpEt6z10sRuImxUQoYDndH97oU5IDfSdnDLlBTuTBmmhnyVPP3hO697qdfskz7njPPTYE_f4VsCAnQp&amp;sig=AHIEtbSG0tP0TvMMtMwYZ8G0hVmj8EJW1g\">lecture notes</a> from a University of Maryland course.</li>\n<li>Take a look at some discussion about tries' <a href=\"http://en.wikipedia.org/wiki/Trie\">applications, advantages and disadvantages</a>. If you are interested, learn a bit about how <a href=\"http://en.wikipedia.org/wiki/Suffix_tree\">suffix trees</a> can be used for text search scenarios and how they can be wrangled to support <a href=\"http://en.wikipedia.org/wiki/Generalized_suffix_tree\">multiple words</a>.</li>\n<li>Read this excellent <strong><a href=\"http://whiteboxcomputing.com/java/prefix_tree/\">simple explanation of trie implementation</a></strong>, paying particular attention to the section on choosing a data structure for storing child node references.</li>\n</ol>\n\n<h1>Problem of the week - Autocompletion</h1>\n\n<p>This week's task is as simple or hard as you'd like it to be.</p>\n\n<ol>\n<li>Research different variants of the trie and explain in your own words what to consider when implementing one</li>\n<li><strong>Write an auto-completer.</strong></li>\n</ol>\n\n<p>An auto-completer? What does that mean? It's up to you! It could be as simple as suggesting <a href=\"http://www.cs.duke.edu/%7Eola/ap/linuxwords\">a few random word suffixes from the dictionary</a>, or as involved as supporting various spelling errors, integrating word frequency information, or something evil like suggesting the worst possible yet still technically correct suffix.</p>\n\n<p>Extra bonus points this week for interactive solutions posted to <a href=\"http://jsfiddle.net\">JSFiddle</a> or elsewhere online.</p>\n\n", user_id: nil, difficulty: "", link: "http://codingforinterviews.com/archive/paradigmsareconstructed@gmail.com-1bc404/issue/5", tag_id: nil},

  {name: "Issue 6: Stacks", content: "\n\n<p><img src=\"http://i.imgur.com/fABk4.gif\" border=\"0\"></p>\n\n<h2>Why review stacks?</h2>\n\n<p>A good handle on <strong>stacks</strong> will come in handy in two common interview situations:</p>\n\n<ol>\n<li>Questions <em>about</em> stacks, implementing stack operations and variations on the stack</li>\n<li>Solutions to problems that require using stacks as a tool</li>\n</ol>\n\n<h2>What you need to know</h2>\n\n<p>Stacks are an abstract data type (<a href=\"http://programmers.stackexchange.com/questions/148747/abstract-data-type-and-data-structure\">as opposed to a data structure</a>) for storing and retreiving elements in Last-in First-out order.</p>\n\n<p>Stacks provide two basic operations:</p>\n\n<ol>\n<li>\n<code>push</code>, which places a given element at the top of the stack</li>\n<li>\n<code>pop</code>, which removes and returns the element at the top of the stack</li>\n<li>(sometimes) <code>peek</code>, which returns the element at the top of the stack <em>without removing it</em>\n</li>\n</ol>\n\n<p>Push, pop and peek all operate in O(1) (constant) time, since you maintain a direct pointer to the top of the list.</p>\n\n<p>How simple!</p>\n\n<p></p>\n<center><img src=\"http://i.imgur.com/pcnb6tf.png\" width=\"200/\"></center>\n\n<h3>Implementation</h3>\n\n<p>Stacks are usually implemented using either a linked list or array behind the scenes:</p>\n\n<ol>\n<li>Using a linked list—define a stack node data type with two fields: the node's <code>data</code> and a pointer to the <code>next</code> node.</li>\n<li>Using an array—maintain where the current top is. Even if the array is dynamically resized, push and pop <a href=\"http://stackoverflow.com/a/4854065/136134\">still operate in O(1) amortized time</a>.</li>\n</ol>\n\n<h3>Usage</h3>\n\n<ol>\n<li>Backtracking—stacks are useful as breadcrumbs in search algorithms. When your algorithm detects its current path has failed, pop the path of failure off of the stack and choose a different one.</li>\n<li>Implementing algorithms well-suited for recursion without recursion (<a href=\"http://mitpress.mit.edu/sicp/full-text/sicp/book/node110.html\">as discussed in SICP</a>). E.g., printing <strong>Binary Search Tree</strong> keys in sorted order without recursion (like our problem from a few issues ago), or solving a Towers of Hanoi puzzle without recursion, as in this week's challenge.</li>\n</ol>\n\n<h2>Steps to a more comprehensive understanding</h2>\n\n<p></p>\n<center><a href=\"http://vimeo.com/31139428\" target=\"_blank\"><img src=\"http://i.imgur.com/lqf6Vha.png\" border=\"0\" style=\"width:450;\"></a></center>\n\n<ol>\n<li>If you haven't learned much about stacks or when they're used before, take the 11 minutes to watch <a href=\"http://vimeo.com/31139428\">this video lecture on stacks from a high school AP CS course</a>, maybe the first CS lecture I've ever seen with formal wear in it. Otherwise, try <a href=\"http://ocw.mit.edu/courses/civil-and-environmental-engineering/1-204-computer-algorithms-in-systems-engineering-spring-2010/lecture-notes/MIT1_204S10_lec06.pdf\">these lecture notes</a> from an MIT civil and environmental engineering computer algorithms course</li>\n<li>Read a bit of the <a href=\"http://en.wikipedia.org/wiki/Stack_(abstract_data_type)\">Wikipedia article on stacks</a> and pay particular attention to their description of <a href=\"http://en.wikipedia.org/wiki/Stack_(abstract_data_type)#Basic_architecture_of_a_stack\">stacks being used for allocating and accessing memory</a>.</li>\n<li>Complete this week's challenge problems!</li>\n</ol>\n\n<h1>Problem of the week - A Stack of Stack Problems</h1>\n\n<ol>\n<li>Research stacks and write about one interesting use case for stacks.</li>\n<li>Write a data structure that provides the operations of the stack—<code>push</code>, <code>pop</code>, and <code>peek</code>\n</li>\n<li>\n<strong>Write a Towers of Hanoi solver</strong>, without using recursion.</li>\n</ol>\n\n<p>In the <a href=\"http://en.wikipedia.org/wiki/Tower_of_Hanoi\">Towers of Hanoi</a> puzzle, you have three towers of rings—<code>tower 1</code>, <code>tower 2</code>, and <code>tower 3</code>.</p>\n\n<p><img src=\"http://i.imgur.com/t9Oso6H.jpg\" width=\"400/\"></p>\n\n<p><strong>Rings can only be placed on top of rings bigger than them.</strong> The goal is to transfer the rings from tower 1 (with <code>n</code> rings) to tower 2 (empty) without breaking the rule that smaller rings must always only be on top of bigger rings.</p>\n\n<p><img src=\"http://i.imgur.com/NXVvOPv.gif\" width=\"400/\"></p>\n\n<p>Write a solver for Towers of Hanoi in your favorite programming language. You can choose the form of your solution:</p>\n\n<ol>\n<li>Return a list of the operations that would be required to move from tower 1 to tower 2.</li>\n<li>Graphically show the steps of a solution to move from tower 1 to tower 2.</li>\n</ol>\n\n<p>Give it a shot for an hour or so. If you get stuck, feel free to look up a general approach online. <a href=\"http://amzn.com/1479274836?tag=a202-20\">Elements of Programming Interviews has a great explanation on page 218</a>.</p>\n\n<p><strong>Extra bonus points this week for solutions that visualize the stacks posted to <a href=\"http://jsfiddle.net\">JSFiddle</a> or elsewhere online.</strong></p>\n\n", user_id: nil, difficulty: "", link: "http://codingforinterviews.com/archive/paradigmsareconstructed@gmail.com-1bc404/issue/6", tag_id: nil},

  {name: "Issue 7: Singleton", content: "\n\n<p>Or, the loneliest of the design patterns.</p>\n\n<p><img src=\"http://i.imgur.com/yZMqZ.gif\" border=\"0\"></p>\n\n<h2>Why review the Singleton pattern?</h2>\n\n<p>Design pattern questions show up in many interviews, especially for more senior engineers. If you're interviewing for internships or straight out of college, mastery of design patterns is a very positive sign, but not knowing them usually won't hurt you. For more senior engineering positions, knowledge of design patterns is a must.</p>\n\n<p>Though controversial, the <strong>singleton</strong> design pattern shows up in many interviews and codebases, and is often a good starting point for object-oriented design dicussion. In <a href=\"http://amzn.com/098478280X?tag=a202-20\">Cracking the Coding Interview</a>, under the table \"Absolute must-have knowledge\", the two design patterns listed are <strong>singleton</strong> and <strong>factory</strong> (which we'll review in a future issue).</p>\n\n<p>Recognizing the singleton pattern when you see it and knowing how and when to supplant it with something more flexible can also come in handy during tough refactorings.</p>\n\n<h2>What you need to know</h2>\n\n<p>The <strong>singleton</strong> (<a href=\"http://en.wikipedia.org/wiki/Singleton_pattern\">Wikipedia</a>) is a design pattern that restricts instantiation of a class to <strong>one object</strong>.</p>\n\n<p>In other words, you create a class that maintains a reference to the only instance of itself.</p>\n\n<p>The singleton's key value propositions:</p>\n\n<ol>\n<li>Ensuring there is <strong>only one instance</strong> of a class</li>\n<li>Giving a <strong>global point of access</strong> for that class</li>\n<li>(optional) Using this single point of access to control when initialization happens</li>\n</ol>\n\n<h3>How to use it</h3>\n\n<p>Here's a UML diagram of an example singleton class:</p>\n\n<p><img src=\"http://i.imgur.com/34lKDe3.png\" alt=\"\"></p>\n\n<p>The most important things to notice:</p>\n\n<ol>\n<li>The constructor (<code>Singleton() : void</code>) is <strong>private</strong>. This lets the Singleton class ensure no outside code can create another instance. In some languages, <a href=\"http://blog.pixelbreaker.com/actionscript-3-0/as30-better-singletons\">such as AS3</a>, constructors can't be declared private, so other methods are used to enforce the singleton invariant.</li>\n<li>The singleton <code>instance</code> object can either be (1) <strong>lazy initialized</strong> in the <code>getInstance()</code> function or (2) <strong>eager initialized</strong> in the <code>instance</code> field declaration</li>\n</ol>\n\n<h3>When to use it</h3>\n\n<p>As one StackOverflow poster <a href=\"http://stackoverflow.com/questions/228164/on-design-patterns-when-to-use-the-singleton\">put it</a>, there are \"very few acceptable reasons to use a Singleton\". Singletons often get over-used, as we'll see in the Drawbacks section. </p>\n\n<p>Common singletons you might come across:</p>\n\n<ul>\n<li>Shared resources that get accessed often from all over the codebase, e.g., a single handle for a <strong>database connection</strong>, a simple <strong>logger</strong>, a shared print spooler</li>\n<li>Read-only singletons, e.g., configuration information that should only be written to at startup time</li>\n</ul>\n\n<h3>Drawbacks and alternatives</h3>\n\n<p><em>(Or, why <a href=\"https://sites.google.com/site/steveyegge2/singleton-considered-stupid\">Steve Yegge lies awake at night pondering how much electricity the Singleton pattern has wasted during its existence</a>.)</em></p>\n\n<h4>Singletons are difficult to unit test</h4>\n\n<p>See this post from Google's testing team about <a href=\"http://googletesting.blogspot.com/2008/05/tott-using-dependancy-injection-to.html\">why singletons are difficult to test</a>. They also show how to use a replacement for the static singleton accessor, <strong>dependency injection</strong>, that is easier to test. In short, you pass a reference to the single instance of the former singleton class through to the constructor for any class that wants to use the former singleton.</p>\n\n<h4>Singletons are inflexible</h4>\n\n<p>Before creating a singleton class, be sure it will <em>always</em> be a singleton. If a few months down the line you decide you want more than one instance of the class, you may have a heck of a cleanup job to do.</p>\n\n<p>As <a href=\"https://sites.google.com/site/steveyegge2/singleton-considered-stupid\">Steve Yegge puts it</a>:</p>\n\n<p>\"<em>Someday you will be amazed that, by gosh, you really DO need another implementation of that dang PrintSpooler class, and it should have been an interface, a factory, and a set of implementation classes. D'oh!</em>\"</p>\n\n<h4>Singletons are \"basically just a memory leak\"</h4>\n\n<p>It's difficult to know when to deallocate a singleton. As Steve Yegge puts it, \"<em>nobody's going to call you and say \"nobody's going to be using you for a while!</em>\"</p>\n\n<h2>Steps to a more comprehensive understanding</h2>\n\n<p></p>\n<center><a href=\"http://www.newthinktank.com/2012/09/singleton-design-pattern-tutorial/\" target=\"_blank\"><img src=\"http://i.imgur.com/sV1vk0P.png\" border=\"0\" style=\"width:450;\"></a></center>\n\n<ol>\n<li>If you've never used the singleton pattern before, take the 18 minutes to watch <a href=\"http://www.newthinktank.com/2012/09/singleton-design-pattern-tutorial/\">this video on singleton usage</a> from a guy who sounds a lot like Andy from The Office. Otherwise, try <a href=\"http://www.cs.colorado.edu/%7Ekena/classes/6448/f07/lectures/22/22-SingletonCommand.pdf\">these lecture notes</a> from a UC Boulder object-oriented design course.</li>\n<li>Read a bit of the <a href=\"http://en.wikipedia.org/wiki/Singleton_pattern\">Wikipedia article on the singleton</a> and pay particular attention to the description of <a href=\"http://en.wikipedia.org/wiki/Singleton_pattern#The_solution_of_Bill_Pugh\">singleton thread safety</a> when using the singleton pattern in concurrent Java applications.</li>\n</ol>\n\n<h1>Problem of the week - Singletons considered <em>okay</em>\n</h1>\n\n<p></p>\n<center><img src=\"http://i.imgur.com/RouawO1.png\" width=\"100/\"></center>\n\n<ol>\n<li>Write a simple singleton class in your favorite programming language with an example usage.</li>\n<li>Solve the Sorted array binary search problem:</li>\n</ol>\n\n<p>Given a sorted array of integers <code>array</code> and an integer <code>key</code>, return the index of the <em>first</em> instance of <code>key</code> in the <code>array</code>. If <code>key</code> is not present in <code>array</code>, you should return <code>-1</code>.</p>\n\n<p>For example, given the array <code>[-10, -2, 1, 5, 5, 8, 20]</code> and key <code>5</code>, you should return the index <code>3</code>.</p>\n\n<p>Your solution should be a <a href=\"http://en.wikipedia.org/wiki/Binary_search_algorithm\">binary search</a>, that is, it should run in <code>O(log n)</code> time.</p>\n\n<p>Though it's straightforward, if you get stuck, <a href=\"http://amzn.com/1479274836?tag=a202-20\">Elements of Programming Interviews</a> covers the problem and solution in section 8.1. Still code it up.</p>\n\n<p><strong>Extra bonus points for solutions that visualize the problem posted to <a href=\"http://jsfiddle.net\">JSFiddle</a> or elsewhere online.</strong></p>\n\n", user_id: nil, difficulty: "", link: "http://codingforinterviews.com/archive/paradigmsareconstructed@gmail.com-1bc404/issue/7", tag_id: nil},

  {name: "Issue 8: Software Design", content: "\n\n<p></p>\n<center>\n<img src=\"http://i.imgur.com/xKIxXaZ.gif\" height=\"300/\"><img src=\"http://i.imgur.com/nib1J.gif\" height=\"300/\">\n</center>\n\n<h2>Why review and practice software design?</h2>\n\n<p>Questions about designing software systems show up in many different interviews, espeically at large companies that maintain very large systems. Open ended software design questions are <a href=\"http://www.careercup.com/page?pid=object-oriented-design-interview-questions\">often asked at</a> Amazon, Apple and Google.</p>\n\n<p>Whether these questions should be asked at interviews at all is <a href=\"http://www.nomachetejuggling.com/2010/04/06/avoiding-the-big-design-interview-question/\">controversial</a>, as some engineers feel software is better evolved from a small set of requirements and built out as new functionality is required. Regardless, these questions get asked often, and can give your interviewer a way to see how you handle explicitly breaking a problem down into parts.</p>\n\n<h3>Breaking things down</h3>\n\n<p>How would you make a game of chess?</p>\n\n<p>How would you make a text editor?</p>\n\n<p>At first, these questions can seem indimidatingly big. It's perfectly normal to feel overwhelmed the first time you approach questions about how you would implement a large software system—heck, there are thousands of lines of code in many chess games and text editors (or a million in the case of emacs).</p>\n\n<p>Fortunately, making design decisions about breaking things down before diving deep into implementation details is a muscle you can exercise.</p>\n\n<p>Aside from completing this issue's problem, a great way to practice is to habitually think about systems and how you would model it in software. Next time you use a piece of software, think, <strong>how would I go about making that?</strong> What decisions would I have to make along the way?</p>\n\n<h2>Learning—One Hour of Designing Software</h2>\n\n<p></p>\n<center><a href=\"http://www.youtube.com/watch?v=COGYpAokXbg&amp;list=EC818D7B4539EED6D3&amp;index=2\" target=\"_blank\"><img src=\"http://i.imgur.com/nyPMYp0.png\" border=\"0\" style=\"width:450;\"></a></center>\n\n<p>If you haven't implemented many full software systems before, watch this 1 hour and 20 minute <a href=\"http://www.youtube.com/watch?v=COGYpAokXbg&amp;list=EC818D7B4539EED6D3&amp;index=2\">unit from Peter Norvig's Deisgn of Computer Architecture course</a>. Norvig covers problem breakdown, designing a solution, testing components of a system and coding it up. As my brother notes, it's a <em>\"basic example, but showed how thoughtful the process of design can be.\"</em></p>\n\n<p>If you can't make it through Norvig's lectures, try <a href=\"http://www.cs.wustl.edu/%7Eschmidt/PDF/design-principles4.pdf\">these lecture notes</a> from a Vanderbuilt University lecturer's systems architecture course.</p>\n\n<h1>Problem of the week - Design Decisions</h1>\n\n<p></p>\n<center><img src=\"http://i.imgur.com/HiNChaz.gif\" width=\"225/\"></center>\n\n<p>Scenario: You are on a team that's designing a system which, given (a) a budget, (b) family size and (c) a list of favorite meals, will <strong>construct a good weekly shopping list for the family</strong>.</p>\n\n<p>Your task:</p>\n\n<ol>\n<li>\n<strong>Write down two or three clarifying questions</strong> you would ask an interviewer about this design problem. Then <strong>come up with answers</strong> that you think would be reasonable.</li>\n<li>\n<strong>Design the architecture</strong> (i.e. most important classes, methods and data structures) for such a system. Feel free to use a whiteboard or online tool such as <a href=\"http://www.gliffy.com/\">Gliffy</a>. Spend less than 30 minutes on this task, then complete the followup questions in (3)</li>\n<li>How would you test different parts of your solution? What are some sample cases you had in mind?</li>\n</ol>\n\n", user_id: nil, difficulty: "", link: "http://codingforinterviews.com/archive/paradigmsareconstructed@gmail.com-1bc404/issue/8", tag_id: nil},

  {name: "Issue 9: Quicksort", content: "\n\n<p></p>\n<center><img src=\"http://i.imgur.com/mYGrtLM.gif\" height=\"300/\"></center>\n\n<p><em>\"Just grab a thing and compare the other things with it.\"</em> - Tony Hoare, inventor of quicksort</p>\n\n<p><strong>Quicksort</strong> (<a href=\"http://www.amazon.com/gp/product/0262033844/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0262033844&amp;linkCode=as2&amp;tag=a202-20\">CLRS page 146</a>) is a sorting algorithm with a very good run time in practice, both <strong>(1)</strong> beating out many other O(n log n) sorting algorithms in run time performance and <strong>(2)</strong> allowing its operations to be done in-place, requiring no extra space.</p>\n\n<ul>\n<li>Best case: <strong>O(n log n)</strong> comparisons</li>\n<li>Worst case: <strong>O( n^2 )</strong> comparisons</li>\n<li>Average case: <strong>O(n log n)</strong> comparisons</li>\n</ul>\n\n<p>Though the worst case is n^2 — this behavior is rare.</p>\n\n<h2>Implementing quicksort</h2>\n\n<p>To quicksort, you:</p>\n\n<ol>\n<li>Pick a <strong>pivot</strong> element from the array.</li>\n<li>Ensure everything to the <strong>left</strong> of the pivot is less than the pivot. Ensure everything to the <strong>right</strong> is greater than the pivot. This is known as <strong>partitioning</strong>.</li>\n<li>Recursively sort the left and right subarrays.</li>\n<li>Place the pivot between the two now-sorted subarrays.</li>\n</ol>\n\n<p>The base case of the recursive operation is a list of length 0 or 1. It's already sorted!</p>\n\n<p>Implementations of quicksort are sometimes split into two functions:</p>\n\n<ol>\n<li>A <code>partition</code> method (taking care of step 2 above) which takes a <code>pivot</code> and an array and ensures everything to the left is less than and everything to the right is greater than the pivot</li>\n<li>A <code>quicksort(array)</code> method for choosing a pivot, partitioning, recursively calling itself and placing the pivot back in between the results</li>\n</ol>\n\n<p></p>\n<center><img src=\"http://i.imgur.com/sPfcNa5.gif\"></center>\n\n<h2>Consideration</h2>\n\n<p>Any element would work for the pivot in quicksort, but there is a catch—</p>\n\n<p>Choosing the <strong>leftmost element</strong> for the partition causes worst-case behavior in <strong>already sorted</strong> arrays—which is a very common use case for sorting.</p>\n\n<p>Often times implementations will choose the middle or a random element. Choosing a random pivot element can help you avoid having to encounter worst case scenarios in your patterned data in the first place.</p>\n\n<h2>Steps to a more comprehensive understanding</h2>\n\n<p></p>\n<center><a href=\"http://www.youtube.com/watch?v=vK_q-C-kXhs\" target=\"_blank\"><img src=\"http://i.imgur.com/Xuxhw3z.png\" border=\"0\" style=\"width:450;\"></a></center>\n\n<ol>\n<li>If you haven't previously learned about or implemented quicksort, you should set aside the 12 minutes to watch this <a href=\"http://www.youtube.com/watch?v=vK_q-C-kXhs\">MIT intro to algorithms lecture on implementing a quicksort</a> or read these <a href=\"http://www.cs.cmu.edu/%7Efp/courses/15122-s11/lectures/08-qsort.pdf\">lecture notes</a> from a CMU course.</li>\n<li>Take a look at some discussion about quicksort's <a href=\"http://en.wikipedia.org/wiki/Quicksort\">considerations</a> and <a href=\"http://en.wikipedia.org/wiki/Quicksort#In-place_version\">in-place implementation differences</a>.</li>\n<li>Let's also use quicksort as an excuse to <a href=\"http://www.sorting-algorithms.com/\">look at all of these pretty sorting animations again</a>.</li>\n<li>Read this <a href=\"http://stackoverflow.com/questions/7942897/quicksort-java-causes-stackoverflow-at-array-length-60k\">solution to someone's <strong>actual stack overflow on Stack Overflow</strong></a> by choosing a random pivot to avoid worst case partitioning.</li>\n</ol>\n\n<p></p>\n<center><a href=\"http://stackoverflow.com/questions/7942897/quicksort-java-causes-stackoverflow-at-array-length-60k\"><img src=\"http://i.imgur.com/xRglD8J.jpg\"></a></center>\n\n<h1>Problem of the week - Quicksort</h1>\n\n<ol>\n<li>Write an answer to the common interview question: <strong>what makes quicksort different from merge sort?</strong>\n</li>\n<li>Implement recursive quicksort <strong>(a)</strong> choosing the leftmost element as a pivot, <strong>(b)</strong> choosing the middle element as a pivot, and <strong>(c)</strong> choosing a random element as a pivot. Don't worry about storage.</li>\n<li>\n<strong>(Bonus)</strong> Measure how many comparisons your quicksorts do on different arrays: already sorted, all the same element, randomized.</li>\n</ol>\n\n", user_id: nil, difficulty: "", link: "http://codingforinterviews.com/archive/paradigmsareconstructed@gmail.com-1bc404/issue/9", tag_id: nil},

  {name: "Issue 10: Closures", content: "\n\n<p></p>\n<center><img src=\"http://i.imgur.com/7gmB870.gif\" height=\"300/\"></center>\n\n<p></p>\n<center>\n<i>\"Hey, what's going on out there?\"</i> - A function in a closure</center>\n\n<p>A <strong>closure</strong> (or <strong>function closure</strong>) is a block of code which meets three criteria. It can, as <a href=\"http://innig.net/software/ruby/closures-in-ruby\">well-described by Paul Cantrell</a>:</p>\n\n<ul>\n<li><p>be passed around as a value</p></li>\n<li><p>be executed on demand by anyone who has that value</p></li>\n<li><p>refer to variables from the context in which it was created (i.e. it is closed with respect to variable access, in the mathematical sense of the word \"closed\").</p></li>\n</ul>\n\n<p>Closures are an increasingly standard language feature first implemented in the programming language Scheme in 1975. Since then, closures can be found in Lisp, ML, Smalltalk, C#, Ruby (<a href=\"http://innig.net/software/ruby/closures-in-ruby\">well... it's complicated</a>), Javascript, and, more explicitly with the introduction of version 8, Java.</p>\n\n<h2>Why learn about closures?</h2>\n\n<p>Interviewers often ask questions about the <a href=\"http://en.wikipedia.org/wiki/Lexical_scope#Lexical_scoping\">lexical scope</a> of variables and other identifiers in example pieces of code.</p>\n\n<p>Especially—</p>\n\n<h3>Scope in Javascript, or the \"last-value problem\"</h3>\n\n<p>If you profess to have Javascript experience, interview questions similar to the one <a href=\"http://frontendcoder.wordpress.com/2013/01/29/learning-javascript-via-interview-questions-closures/\">written about here</a> will often come up:</p>\n\n<pre><code>function initButtons() {\n    var body = document.body,\n        button, i;\n\n    for (i = 0; i &lt; 5; i++) {\n        button = document.createElement(\"button\");\n        button.innerHTML = \"Button \" + i;\n        button.addEventListener(\"click\", function (e) {\n            alert(i);\n        }, false);\n        body.appendChild(button);\n    }\n}\n</code></pre>\n\n<p><em>When this function is called...</em></p>\n\n<p><strong>What will be displayed?</strong></p>\n\n<p><strong>What will happen when you click on each button?</strong></p>\n\n<h2><a href=\"http://jsfiddle.net/9KASp/\">Try it out here (JSFiddle)</a></h2>\n\n<h3>What's going on there?</h3>\n\n<p>The key closure \"gotcha\" you come across Javascript and ActionScript 3 is this—the <code>function(){}</code> defined in <code>addEventListener</code> will be accessing the variables in the outer <code>function initButtons()</code> scope, not the <code>for</code> loop <em>block-level</em> scope—unlike some other languages, <strong>Javascript does not have block-level (for, if, while, etc.) scope</strong>.</p>\n\n<p>The closure captures its surrounding scope, as in, if you modified the variable inside the closure, and another closure executed later referenced that variable, the change within the first closure should show up inside the second one. As one of my brothers puts it, \"closures are one of the many reasons that it's best to avoid mutability when doing clever things\".</p>\n\n<p>Even if a variable is not of a <code>pointer</code> type, your enclosed function will be looking at and modifying the variable in the enclosing scope directly. Closures actually <strong>capture the scope</strong>, not just a snapshot of the variables in that scope.</p>\n\n<p>This scope question is a favorite of interviewers because it is seen as a shortcut to differentiate between intermediate and advanced Javascript developers. The idea is, however right or wrong, if you've done a <em>lot</em> of programming in Javascript, you'll have been bitten by the function / block scoping distinction while using closures in Javascript in the past.</p>\n\n<h5>Getting around it</h5>\n\n<p>To work around this issue, you can exploit the fact that closures can capture <strong>function-level</strong> scope while closures within (for, if, while, etc.) blocks can not (because there is no block-level scope).</p>\n\n<p>In <a href=\"http://frontendcoder.wordpress.com/2013/01/29/learning-javascript-via-interview-questions-closures/\">Nathaniel Lee's post</a>, he describes a common solution to this problem:</p>\n\n<pre><code>    button.addEventListener(\"click\", function (j) {\n        return function (e) {\n            alert(j);\n        };\n    }(i), false);\n</code></pre>\n\n<p>Nathaniel defines and calls a function that simply returns our original function—but passes in <code>i</code> to the outer function as a parameter. Since this outer function is immediately called (the <code>}(i)</code> portion), addEventListener() receives a function that references <code>j</code>, the current value of <code>i</code>—0, 1, 2, 3, or 4.</p>\n\n<h2>How are closures implemented?</h2>\n\n<p>Closures are usually implemented with a data structure that contains (1) a pointer to the function code and (2) a representation of the function's lexical environment at the time of closure creation.</p>\n\n<p>Closures require that the variables they reference stay around until the time the closure is executed (in the example above, the variable <code>i</code> would need to stick around until we click a button). Typically, languages that support closures use garbage collection as a mechanism to retain referenced chunks of memory. Languages that use a linear stack-based execution and memory model face a greater challenge in implementing closures, known as the <a href=\"http://en.wikipedia.org/wiki/Funarg_problem\">Funarg, or \"functional argument\" problem</a>.</p>\n\n<h2>What are closures often used for?</h2>\n\n<p>Closures are used for a number of things, including many basic language constructs. Here is an excellent <a href=\"http://msdn.microsoft.com/en-us/magazine/ff696765.aspx\">writeup and list of examples</a>.</p>\n\n<p>In terms of what you might come across during interviews, particularly important to note are:</p>\n\n<ol>\n<li>The <a href=\"http://www.yuiblog.com/blog/2007/06/12/module-pattern/\">Javascript <strong>module</strong> pattern</a>—in this, closures are used to store private variables and methods while public properties and methods are returned as an object (for those unfamiliar with Javascript, essentially a dictionary / associative array).</li>\n<li>Using closures to create \"counter\" functions and for constructing <a href=\"http://en.wikipedia.org/wiki/Memoization\">memoizing</a> versions of functions</li>\n</ol>\n\n<h2>Steps to a more comprehensive understanding</h2>\n\n<p></p>\n<center><a href=\"https://www.youtube.com/watch?v=0zVizaCOhME\" target=\"_blank\"><img src=\"http://i.imgur.com/rVB9MxX.png\" border=\"0\" style=\"width:450;\"></a></center>\n\n<ol>\n<li>Spend a bit of time and skip around this two-hour long <a href=\"https://www.youtube.com/watch?v=0zVizaCOhME\">Google Tech Talk on the implementation of Closures for Java</a>. While a bit long, it does an excellent job of covering features of closures and considerations in implementation (and has some awesome picture-in-picture video effects). Otherwise, <a href=\"http://faculty.cs.gwu.edu/%7Eclarkson/courses/csci4223/2013sp/lec/lec12.pdf\">these lecture notes from a GW course on programming languages</a> provide a nice explanation of closures in Standard ML. I couldn't find a suitable lecture video on closures this week—if anyone finds one, let me know <a href=\"http://twitter.com/interviewcoding\">@interviewcoding</a> and I'll retweet it.</li>\n<li>Take a look at the <a href=\"http://en.wikipedia.org/wiki/Closure_%28computer_science%29\">Wikipedia article on Closures</a> and, if you're especially interested, this comp.lang.javascript <a href=\"http://jibbering.com/faq/notes/closures/\">description of closure implementation in ECMAScript (Javascript)</a>. The Wikipedia article's section on <a href=\"http://en.wikipedia.org/wiki/Closure_%28computer_science%29#Closure_leaving\">closure-leaving</a> highlights some key differences between languages. The section on closure-like constructs highlights <a href=\"http://en.wikipedia.org/wiki/Closure_%28computer_science%29#Closure-like_constructs\">some disgusting things</a> you can do to emulate full closures.</li>\n<li>If you have some <strong>Javascript</strong> experience, read through Nathaniel's closure <a href=\"http://frontendcoder.wordpress.com/2013/01/29/learning-javascript-via-interview-questions-closures/\">interview question</a> again to confirm you understand the block scoping issue and workaround. If you're more of a <strong>Ruby-ist</strong>, <a href=\"http://innig.net/software/ruby/closures-in-ruby\">this sample code</a> will illustrate some of the finer points of scope in Ruby.</li>\n</ol>\n\n<h1>Problem of the week - Reversed Are Words These</h1>\n\n<p>This problem is a simpler one, so you can give it a shot <em>right now</em>. Write a function which, given a sentence like this:</p>\n\n<pre><code>    Coding for Interviews contains too many gifs.\n</code></pre>\n\n<p>Returns the sentence with the order of the words reversed, like so:</p>\n\n<pre><code>    gifs. many too contains Interviews for Coding\n</code></pre>\n\n<p>The catch is: your function should use <code>O(1)</code> space. <em>What is your algorithm's time complexity?</em></p>\n\n<p>If you get stuck, you can find a solution in <a href=\"http://amzn.com/1479274836?tag=a202-20\">Elements of Programming Interviews</a> page 197.</p>\n\n<p>Since this is a simpler problem, <strong>submit by next Tuesday</strong>. I will send out a short update issue with your solutions and <strong>another problem</strong> (and save the next topic review for the following week).</p>\n\n", user_id: nil, difficulty: "", link: "http://codingforinterviews.com/archive/paradigmsareconstructed@gmail.com-1bc404/issue/10", tag_id: nil},

  {name: "Issue 11: Practice Resources", content: "", user_id: nil, difficulty: "", link: "http://codingforinterviews.com/archive/paradigmsareconstructed@gmail.com-1bc404/issue/11", tag_id: nil},

  {name: "Issue 12: Problem: Max Consecutive Sum", content: "", user_id: nil, difficulty: "", link: "http://codingforinterviews.com/archive/paradigmsareconstructed@gmail.com-1bc404/issue/12", tag_id: nil},

  {name: "Issue 13: Problem: Spiral Matrix Traversal", content: "\n\n<p>This week's question is kind of like this:</p>\n\n<p><img src=\"http://i.imgur.com/9oIJ6Kh.gif\" alt=\"\"></p>\n\n<p>Or this:</p>\n\n<p><img src=\"http://i.imgur.com/pKny60a.gif\" alt=\"\"></p>\n\n<p>This question is <a href=\"https://github.com/blakeembrey/code-problems/tree/master/problems/spiral\">courtesy of Blake Embrey</a>'s wonderful GitHub repository of code problems (and solutions, but no cheating!)</p>\n\n<h1>Spiral</h1>\n\n<p>Write a function that accepts four arguments. The first two arguments are the size of the grid (<em>h x w</em>), filled with ascending integers from left to right, top to bottom, starting from 1. The next two arguments are is the starting positions, the row (<em>r</em>) and column (<em>c</em>).</p>\n\n<p>Return an array of integers obtained by spiraling outward anti-clockwise from the <em>r</em> and <em>c</em>, starting upward.</p>\n\n<pre><code>f(5, 5, 3, 3)\n\n// Should return: \n// [ 13, 8, 7, 12, 17, 18, 19,\n// 194, 9, 4, 3, 2, 1, 6,\n// 11, 16, 21, 22, 23, 24,\n// 25, 20, 15, 10, 5 ]\n\nf(2, 4, 1, 2) // [ 2, 1, 5, 6, 7, 3, 8, 4 ]\n</code></pre>\n\n<p>The following graphics show the grid in question and the spiral generated, beginning at cell (3, 3).</p>\n\n<p><img src=\"http://i.imgur.com/jR8s2An.png\" alt=\"Grid 1\"></p>\n\n<p><img src=\"http://i.imgur.com/CuTJMwv.png\" alt=\"Grid 2\"></p>\n\n", user_id: nil, difficulty: "", link: "http://codingforinterviews.com/archive/paradigmsareconstructed@gmail.com-1bc404/issue/13", tag_id: nil},

  {name: "Issue 14: Problem: Level-order Print", content: "\n\n<p>The king of level-order tree traversal:</p>\n\n<p><img src=\"http://i.imgur.com/LCEqgYE.gif\"></p>\n\n<p><img src=\"http://i.imgur.com/oOd4cua.gif\"></p>\n\n<p>In a past week we covered <strong>The Big Three</strong> tree traversals: <strong>pre-order</strong>, <strong>in-order</strong> and <strong>post-order</strong>. But this week's traversal is fairly common, too—and often <a href=\"http://www.careercup.com/question?id=8635794\">shows up</a> in <a href=\"http://stackoverflow.com/questions/5567102/how-to-print-a-binary-tree-level-by-level-interview-question\">interviews</a>.</p>\n\n<p>This week's question is to <strong>print a binary tree of integers in level order</strong>.</p>\n\n<p>Level-order printing means printing each row of the tree from left to right, from root row to the deepest row. After each row, print a newline.</p>\n\n<p>For example:</p>\n\n<p></p>\n<center><img src=\"http://i.imgur.com/rzqZghF.png\" width=\"450/\"></center>\n\n<p><strong>Bonus</strong>: Can you make one version that supports binary trees, and another that can handle <em>any <a href=\"http://en.wikipedia.org/wiki/K-ary_tree\">K-ary tree</a></em>?</p>\n\n<p><strong>Double karma bonus</strong>: Can you submit your solution to <a href=\"https://github.com/blakeembrey/code-problems/tree/master/problems/tree-level-order-print\">this problem's entry</a> in Blake Embrey's code problems repository?</p>\n\n", user_id: nil, difficulty: "", link: "http://codingforinterviews.com/archive/paradigmsareconstructed@gmail.com-1bc404/issue/14", tag_id: nil},

  {name: "Issue 15: Problem: 8 Queens", content: "\n\n<p><img src=\"http://i.imgur.com/BVCAYEx.gif\" alt=\"\"></p>\n\n<p><img src=\"http://upload.wikimedia.org/wikipedia/commons/1/1f/Eight-queens-animation.gif\" alt=\"\"></p>\n\n<p>This week's question has been spotted <a href=\"http://www.careercup.com/question?id=13014684\">at Google</a>, <a href=\"http://www.careercup.com/question?id=2407\">Qualcomm</a>, and functional programming courses all over.</p>\n\n<p>The problem is to collect all solutions to <strong>the 8 queens problem</strong>.</p>\n\n<h2>Wait, what?</h2>\n\n<p><strong>What is chess?</strong> <a href=\"http://en.wikipedia.org/wiki/Chess\">See Wikipedia</a> (\"A two-player strategy board game played on a checkered gameboard with 64 squares arranged in an 8x8 grid\")</p>\n\n<p><strong>What is a queen?</strong> The queen is arguably the most powerful piece in chess. It can move and capture pieces diagonally, vertically and horizontally at any distance.</p>\n\n<p><strong>What is the 8 queens problem?</strong> The 8 queens problem is to find a set of placements for 8 queens on an 8x8 chessboard where <strong>none of the queens could capture each other</strong> in one move.</p>\n\n<p><strong>What is the N queens problem?</strong> The N queens problem is the more general version of the 8 queens problem (an NxN board and N pieces).</p>\n\n<p><a href=\"http://www.brainmetrix.com/8-queens/\">Try placing 8 queens yourself here</a> (the best I have gotten is 7!)</p>\n\n<p><a href=\"http://www.youtube.com/watch?v=V4qSux-M8N4\">Watch a neat 3D problem solution animation</a></p>\n\n<p><a href=\"http://www.durangobill.com/N_Queens.html\">See a table of the number of solutions for various Ns</a></p>\n\n<h2>What should my solution look like?</h2>\n\n<p>Example signature:</p>\n\n<pre><code>/**\n  * Returns nested array of valid placements\n  * Solutions (list) # -&gt; Columns (list) -&gt;\n  * Queen placed on row # (int)\n  */\npublic static int[][] getPlacements(int n)\n</code></pre>\n\n<p>E.g., my solution's placements for 8 queens, or getPlacements(8):</p>\n\n<pre><code>Number of placements is 92\nPlacement 0: [0, 4, 7, 5, 2, 6, 1, 3]\nPlacement 1: [0, 5, 7, 2, 6, 3, 1, 4]\nPlacement 2: [0, 6, 3, 5, 7, 1, 4, 2]\nPlacement 3: [0, 6, 4, 7, 1, 3, 5, 2]\nPlacement 4: [1, 3, 5, 7, 2, 0, 6, 4]\nPlacement 5: [1, 4, 6, 0, 2, 7, 5, 3]\nPlacement 6: [1, 4, 6, 3, 0, 7, 5, 2]\n...\n</code></pre>\n\n<p><strong>Bonus</strong>: can you make an <strong>awesome web visualization</strong> of your solver? Since everyone loves visualizations, best visualization <strong>wins free access codes to the CFI archive</strong>!</p>\n\n", user_id: nil, difficulty: "", link: "http://codingforinterviews.com/archive/paradigmsareconstructed@gmail.com-1bc404/issue/15", tag_id: nil},

  {name: "Issue 16: Bit Manipulation", content: "\n\n<p>This week's exercise is to write two bit manipulation helper functions <strong>using only bitwise + bit shift operators</strong>:</p>\n\n<pre><code>public static boolean getBit(int number, int index)\n\npublic static int setBit(int number, int index, boolean set)\n</code></pre>\n\n<p><strong>Note: indices in binary representations start from the right hand side.</strong></p>\n\n<p><em>Get Bit</em> returns whether the bit at a given index is set (a 1 in binary representation).</p>\n\n<p><em>Set Bit</em> modifies the integer <code>number</code> by making the bit at <code>index</code> set (1) or clear (0).</p>\n\n", user_id: nil, difficulty: "", link: "http://codingforinterviews.com/archive/paradigmsareconstructed@gmail.com-1bc404/issue/16", tag_id: nil},

  {name: "Issue 17: Reading Standard Libraries", content: "\n\n<p>This week's problem is to write an email validator. Given an email address, your solution should verify whether it is, indeed, a <a href=\"http://en.wikipedia.org/wiki/Email_address\">valid email address</a>.</p>\n\n<p>Sample function signature:</p>\n\n<pre><code>bool isValidEmailAddress(String emailAddress)\n</code></pre>\n\n<p><a href=\"https://www.codeeval.com/open_challenges/35/\">Test your solution out on CodeEval</a>—if you go this route, your solution will be slightly different—reading emails from STDIN. Sneaky trick from a CFI member to grab the test cases, <em>with CodeEval the trick is to write code that just prints out all the lines in sys.stdin</em></p>\n\n<p>You may choose to use a regular expression for this (<a href=\"http://amzn.com/0596528124?tag=a200-20\">here's my favorite book on the topic</a>, <a href=\"http://regexlib.com/CheatSheet.aspx\">here's a solid cheat sheet</a>, and here's the magnificent Zed Shaw's <a href=\"http://regex.learncodethehardway.org/book/\">Learn Regex the Hard Way</a>).</p>\n\n<p>Some sample valid email addresses (<a href=\"http://en.wikipedia.org/wiki/Email_address#Valid_email_addresses\">via Wikipedia</a>):</p>\n\n<ul>\n<li>niceandsimple@example.com</li>\n<li>very.common@example.com</li>\n<li>a.little.lengthy.but.fine@dept.example.com</li>\n</ul>\n\n<p>And invalid:</p>\n\n<ul>\n<li>Abc.example.com</li>\n<li>A@b@c@example.com</li>\n</ul>\n\n<p>Can your solution handle some weirder, technically valid ones?</p>\n\n<ul>\n<li>disposable.style.email.with+symbol@example.com</li>\n<li>postbox@com (top-level domains are valid hostnames)</li>\n<li>admin@mailserver1 (local domain name with no TLD)</li>\n<li>\"()&lt;&gt;[]:,;@\\\\\"!\#$%&amp;'*+-/=?^_`{}| ~.a\"@example.org (normally disallowed special characters are allowed within double quotation marks, and double quotation marks can be escaped...)</li>\n</ul>\n\n<p></p>\n<center><img src=\"http://i.imgur.com/7E2gjkD.gif\"></center>\n\n<p>Give it a shot, see how far you can get in 30 minutes. Email validation can be trickier than you might expect!</p>\n\n", user_id: nil, difficulty: "", link: "http://codingforinterviews.com/archive/paradigmsareconstructed@gmail.com-1bc404/issue/17", tag_id: nil},

  {name: "Issue 18: Dynamic Programming", content: "\n\n<p></p>\n<center><img src=\"http://i.imgur.com/ArrTEFx.gif\" width=\"250/\"></center>\n\n<p>Talking with group members who successfully got jobs at Google, Amazon and Microsoft about the most important things they did to prepare, one thing that stood out was that they kept track of the problems they failed at while practicing and after interviews. <a href=\"http://amzn.com/098478280X?tag=a200-20\">Cracking the Coding Interview</a>'s timeline and preparation map also notes: \"Create a list to track mistakes you've made solving problems\". It's important to hammer on your blind spots to improve your interview prospects.</p>\n\n<h3>A tough topic</h3>\n\n<p>For a handful of group members I spoke with during mentorship calls, a particularly difficult topic to improve on has been <strong>Dynamic Programming</strong>. While putting together the Coding for Interviews course (<a href=\"https://www.udemy.com/programming-code-interview/?couponCode=MEMBER-JAN-2014\">list member discount <strong>MEMBER-JAN-2014</strong></a> valid until the   end of January), this was one of the toughest topics to write about—it's a problem approach strategy I've struggled to become proficient with myself.</p>\n\n<p>Don't be too scared by the name—the term \"dynamic programming\" was <a href=\"http://courses.cs.vt.edu/%7Ecs4104/murali/Fall09/lectures/lecture-15-dynamic-programming.pdf\">invented in the 1950s</a> to make the topic sound impressive during a defense administration hostile to mathematical research. <em>Dynamic programming</em> was considered a term \"not even a Congressman could object to\"—because \"it's impossible to use <em>dynamic</em> in a pejorative sense\".</p>\n\n<p><strong>The good news</strong> is that, like bit manipulation problems, dynamic programming problems show up fairly rarely in interiews because of how difficult and time consuming they can be to solve, code up and test. <em>The bad news</em> is that sometimes you'll get these questions asked anyway.</p>\n\n<h3>Learning it</h3>\n\n<p>While I perused a number of dynamic programming tutorials and university lectures and notes on dynamic programming, I found that (1) <strong>writing</strong> about dynamic programming and (2) <strong>trying dynamic programming practice problems</strong> were the most effective activities I did to get better at approaching DP problems.</p>\n\n<p>So let's get that done right now!</p>\n\n<h2>Dynamic programming: a hands-on approach</h2>\n\n<ol>\n<li>Research and read up on dynamic programming while doing activity #2 below. <a href=\"http://codingforinterviews.com/dppdf\">Here's your <strong>free copy of the DP cheat sheet</strong></a> (<a href=\"http://codingforinterviews.com/dp\">scribd</a>) I've written to post to the Coding for Interviews Udemy course (which you can join with <a href=\"https://www.udemy.com/programming-code-interview/?couponCode=MEMBER-JAN-2014\">list member discount <strong>MEMBER-JAN-2014</strong></a>)</li>\n<li>In a <a href=\"http://gist.github.com\">gist</a> using Markdown, write your own \"explain it like I'm 5\" description of dynamic programming. Guiding questions: (1) <strong>what is dynamic programming?</strong> (2) how can you <strong>recognize</strong> a dynamic programming problem? (3) <strong>how do you solve</strong> a dynamic programming problem?</li>\n<li>Solve and submit your solution to <strong>this week's dynamic programming practice problem</strong>\n</li>\n</ol>\n\n<h1>This week's challenge: Making Change</h1>\n\n<p></p>\n<center><img style=\"width:100;\" src=\"http://i.imgur.com/bOB1IVI.jpg\"></center>\n\n<p>This week's problem (<a href=\"https://github.com/codingforinterviews/practice-problems/tree/master/coin_change\">github</a>, <a href=\"https://www.hackerrank.com/contests/programming-interview-questions/challenges/coin-change\">CFI HackerRank</a>) is to enumerate <strong>how many ways a given list of coins can be used</strong> to make change for a given cash amount (in cents).</p>\n\n<p>So, for example, given the amount <code>4</code>(¢) and coins of values <code>[1, 2, 3]</code> (1¢, 2¢ and 3¢), your program would output <strong><code>4</code></strong>—the count of the four solutions:</p>\n\n<ol>\n<li>1¢, 1¢, 1¢, 1¢</li>\n<li>1¢, 1¢, 2¢</li>\n<li>1¢, 3¢</li>\n<li>2¢, 2¢</li>\n</ol>\n\n<p>Sample function signature: <code>public int coinChangePossibleSolutions(int amount, int[] denominations)</code></p>\n\n<p><a href=\"https://www.hackerrank.com/contests/programming-interview-questions/challenges/coin-change\">Try this problem out on the Coding for Interviews HackerRank section</a>.</p>\n\n<p><em>Special thanks to CFI problem team members Alan, Asim and Austin for writing and reviewing practice problems.</em></p>\n\n", user_id: nil, difficulty: "", link: "http://codingforinterviews.com/archive/paradigmsareconstructed@gmail.com-1bc404/issue/18", tag_id: nil},

  {name: "Issue 19: Programming Language Paradigms", content: "\n\n<p></p>\n<center><img src=\"http://i.imgur.com/JPROc9B.png\" width=\"400/\"></center>\n\n<p>Programming language questions often come up during the technical chit-chat quizzing portions of interviews. Some common questions you'll hear:</p>\n\n<ol>\n<li>\n<strong>What do you like</strong> about your programming language? What <em>don't</em> you like about it?</li>\n<li>\n<em>Compare and contrast</em> language X with language Y.</li>\n<li>What's the difference in how inheritance is implemented in Java and Javascript?</li>\n</ol>\n\n<p>Especially for more experienced candidates out there who have a few programming languages listed on their resume, it's worthwhile to mentally place your favorite programming language among other languages out there.</p>\n\n<p></p>\n<center><a href=\"https://en.wikipedia.org/wiki/List_of_multi-paradigm_programming_languages\"><img src=\"http://i.imgur.com/RYYAPRe.png\" width=\"200/\"></a></center>\n\n<p><a href=\"https://en.wikipedia.org/wiki/List_of_multi-paradigm_programming_languages\">Programming language paradigms</a> are ways of categorizing the features and shared attributes of various programming languages. Most languages are considered multi-paradigm, in that they support multiple styles of programming.</p>\n\n<h1>This week's challenge: The Big 3 Language Questions</h1>\n\n<ul>\n<li>Research and read up on the main programming language paradigms while writing answers to the questions below. Here's a <strong><a href=\"http://codingforinterviews.com/paradigmspdf\">free copy of the programming language paradigms cheat sheet</a></strong> (<a href=\"http://www.scribd.com/doc/204669540/Free-Programming-Language-Paradigms-Cheat-Sheet\">scribd</a>) from the <a href=\"http://codingforinterviews.com/course\">Coding for Interviews Udemy course</a>\n</li>\n<li>In a <a href=\"http://gist.github.com\">gist</a> using Markdown, write up answers to the following questions:</li>\n</ul>\n\n<ol>\n<li>What do you like about your most often used programming language?</li>\n<li>What <em>don't</em> you like about it, and why?</li>\n<li>What paradigms does your language support?</li>\n</ol>\n\n", user_id: nil, difficulty: "", link: "http://codingforinterviews.com/archive/paradigmsareconstructed@gmail.com-1bc404/issue/19", tag_id: nil},

  {name: "Issue 20: Breadth-First Search", content: "\n\n<p>Breadth-first search is a tree traversal algorithm that visits the nodes of a tree <strong>level by level</strong>, increasing the depth after each row's traversal.</p>\n\n<h2>What is BFS used for?</h2>\n\n<p>You'll come across BFS in a few common situations—</p>\n\n<ol>\n<li>finding the <strong>shortest path</strong> between two nodes in a graph—like LinkedIn finding the friends-of-friends.</li>\n<li>\n<strong>filesystem traversal</strong>—while UNIX find is a pre-order depth-first search, some prefer breadth-first for faster searches in certain situations (<a href=\"https://groups.google.com/forum/#!topic/gnu.emacs.sources/cpetntP4Ziw\">like this Emacs-er from 1999</a>)</li>\n<li>generally <strong>printing hierarchies</strong> in rank-order... e.g., if you wanted to print a tree of military officers by their level in the rank hierarchy</li>\n</ol>\n\n<h2>What does it look like?</h2>\n\n<p><a href=\"http://www.youtube.com/watch?v=Ug2hLQv6WeY\">Pop quiz, hot-shot</a>! You have a tree. And your task is to verbally breadth-first traverse it. What do you do?</p>\n\n<p><img src=\"http://i.imgur.com/CdYi6qm.png\"></p>\n\n<p>Well, a breadth-first printing of the tree would be <code>1 2 3 4 5</code>. Each row, you visit the nodes from left to right.</p>\n\n<h2>How do you perform a BFS?</h2>\n\n<p>When you’re performing a breadth-first traversal, you need some sort of way to keep track of where you’ve been (otherwise, looking at a given node, you wouldn’t know which node to visit next).</p>\n\n<p>One way is to <strong>use a queue</strong> to maintain a list of nodes to visit next, remove the nodes and their add children to the end of the queue as you visit them.</p>\n\n<p>The general steps:</p>\n\n<ol>\n<li>\n<strong>Add the root node</strong> to the queue</li>\n<li>While there are still any nodes in the queue:\n\n<ul>\n<li>\n<strong>Remove and visit</strong> the front node in the queue</li>\n<li>\n<strong>Add</strong> each of the current node's <strong>children</strong> to the queue</li>\n</ul>\n</li>\n</ol>\n\n<p>Here's an animated version (from <a href=\"http://en.wikipedia.org/wiki/Breadth-first_search\">Wikipedia on BFS</a>)—<strong><font color=\"gray\">gray nodes</font></strong> are the ones remaining in the queue. <strong>Black nodes</strong> are the ones which have been visited.</p>\n\n<p><img src=\"http://i.imgur.com/dkdJzSx.gif\"></p>\n\n<h3>BFS -&gt; DFS with just one swap</h3>\n\n<p>If you <strong>swap out the queue</strong> in that algorithm <strong>for a stack</strong>, you'd get a depth-first search. Can you wrap your head around why that is?</p>\n\n<h3>In graphs to avoid cycles</h3>\n\n<p>Unlike trees, graphs can have <strong>cycles</strong>—paths from a given node around to itself. When you're performing a breadth-first search of a graph, you will want to avoid getting caught up in these cycles, as they can cause the algorithm to never terminate (though, unlike depth-first searches, it will continue to traverse the entire graph).</p>\n\n<p>To counter this, a common approach is to <strong>mark visited graph nodes</strong> as you go along and ignore them when encountered later. This marking can be done either as an attribute on the node or by maintaining a set of visited nodes.</p>\n\n<h1>This week's challenge: The Sta<i>queue</i>\n</h1>\n\n<p>This week's challenge—not directly related to BFS—is to <strong>implement a queue using two stacks</strong>.</p>\n\n<p><em>Queues</em> are a <strong>first-in-first-out</strong> data structure that we just saw used as a \"next to visit\" data store in breadth-first search.</p>\n\n<p><em>Stacks</em> are a <strong>last-in-first-out</strong> data structure used in depth-first search, and can often be used to implement recursive algorithms iteratively (because the call stack is, itself, a stack).</p>\n\n<p>For this problem, you are to create a queue using two stacks. So your <code>Queue</code> will support the operations:</p>\n\n<ul>\n<li>\n<code>enqueue(item)</code>, which inserts an item into the queue</li>\n<li>\n<code>dequeue()</code>, which removes and returns the oldest item in the queue</li>\n</ul>\n\n<p>Your two <code>Stack</code>s (which your programming language may have available already, otherwise you can create your own pretty easily) have the following operations:</p>\n\n<ul>\n<li>\n<code>push(item)</code>, which inserts an item at the top of the stack</li>\n<li>\n<code>pop()</code>, which removes and returns the top item of the stack</li>\n</ul>\n\n<p>Let's say we just tried using one stack as a queue, pushing instead of enqueueing:</p>\n\n<p><img src=\"http://i.imgur.com/WwEoOmI.gif\" width=\"200/\"></p>\n\n<p>Not so easy! (BTW—we'll see the wonderful source of these animations with next week's solutions).</p>\n\n<p><strong>Can you figure out a way to make a queue using two stacks?</strong> Give it a shot, if you get stuck, try drawing some pictures or working through sample inputs with your work-in-progress. Good luck!</p>\n\n<p><strong>Time complexity</strong>: what is the time complexity of your solution? An <code>O(m)</code> solution is possible, where <code>m</code> is the number of enqueue and dequeue operations performed. Can you figure one out? Hint—does it matter if an operation is expensive the first time you do it, and then really cheap afterwards?</p>\n\n<p><strong>Bonus points</strong> for solutions with visualizations!</p>\n\n<p><strong>Extra bonus followup</strong>: Use your fancy new <code>Queue</code> to hold integers, but now add an <code>O(1)</code> time <code>getMinimum</code> operation, which returns the smallest integer in the queue. What are the extra space requirements for this operation?</p>\n\n<p><em>Thanks to group members Asim Ihsan, Andrew Yates and Greg Jordan for their feedback on this issue!</em></p>\n\n", user_id: nil, difficulty: "", link: "http://codingforinterviews.com/archive/paradigmsareconstructed@gmail.com-1bc404/issue/20", tag_id: nil}
])

# glassdoor.com

Post.create!([
  {name: "What are your strengths?", content: "What are your strengths?", user_id: nil, difficulty: "", link: "http://www.glassdoor.com/blog/common-interview-questions/", tag_id: nil},

  {name: "What are your weaknesses?", content: "What are your weaknesses?", user_id: nil, difficulty: "", link: "http://www.glassdoor.com/blog/common-interview-questions/", tag_id: nil},

  {name: "Why are you interested in working for [insert company name here]?", content: "Why are you interested in working for [insert company name here]?", user_id: nil, difficulty: "", link: "http://www.glassdoor.com/blog/common-interview-questions/", tag_id: nil},

  {name: "Where do you see yourself in five years? Ten years?", content: "Where do you see yourself in five years? Ten years?", user_id: nil, difficulty: "", link: "http://www.glassdoor.com/blog/common-interview-questions/", tag_id: nil},

  {name: "Why do you want to leave your current company?", content: "Why do you want to leave your current company?", user_id: nil, difficulty: "", link: "http://www.glassdoor.com/blog/common-interview-questions/", tag_id: nil},

  {name: "Why was there a gap in your employment between [insert date] and [insert date]?", content: "Why was there a gap in your employment between [insert date] and [insert date]?", user_id: nil, difficulty: "", link: "http://www.glassdoor.com/blog/common-interview-questions/", tag_id: nil},

  {name: "What can you offer us that someone else can not?", content: "What can you offer us that someone else can not?", user_id: nil, difficulty: "", link: "http://www.glassdoor.com/blog/common-interview-questions/", tag_id: nil},

  {name: "What are three things your former manager would like you to improve on?", content: "What are three things your former manager would like you to improve on?", user_id: nil, difficulty: "", link: "http://www.glassdoor.com/blog/common-interview-questions/", tag_id: nil},

  {name: "Are you willing to relocate?", content: "Are you willing to relocate?", user_id: nil, difficulty: "", link: "http://www.glassdoor.com/blog/common-interview-questions/", tag_id: nil},

  {name: "Are you willing to travel?", content: "Are you willing to travel?", user_id: nil, difficulty: "", link: "http://www.glassdoor.com/blog/common-interview-questions/", tag_id: nil},

  {name: "Tell me about an accomplishment you are most proud of.", content: "Tell me about an accomplishment you are most proud of.", user_id: nil, difficulty: "", link: "http://www.glassdoor.com/blog/common-interview-questions/", tag_id: nil},

  {name: "Tell me about a time you made a mistake.", content: "Tell me about a time you made a mistake.", user_id: nil, difficulty: "", link: "http://www.glassdoor.com/blog/common-interview-questions/", tag_id: nil},

  {name: "What is your dream job?", content: "What is your dream job?", user_id: nil, difficulty: "", link: "http://www.glassdoor.com/blog/common-interview-questions/", tag_id: nil},

  {name: "How did you hear about this position?", content: "How did you hear about this position?", user_id: nil, difficulty: "", link: "http://www.glassdoor.com/blog/common-interview-questions/", tag_id: nil},

  {name: "What would you look to accomplish in the first 30 days/60 days/90 days on the job?", content: "What would you look to accomplish in the first 30 days/60 days/90 days on the job?", user_id: nil, difficulty: "", link: "http://www.glassdoor.com/blog/common-interview-questions/", tag_id: nil},

  {name: "Discuss your resume.", content: "Discuss your resume.", user_id: nil, difficulty: "", link: "http://www.glassdoor.com/blog/common-interview-questions/", tag_id: nil},

  {name: "Discuss your educational background.", content: "Discuss your educational background.", user_id: nil, difficulty: "", link: "http://www.glassdoor.com/blog/common-interview-questions/", tag_id: nil},

  {name: "Describe yourself.", content: "Describe yourself.", user_id: nil, difficulty: "", link: "http://www.glassdoor.com/blog/common-interview-questions/", tag_id: nil},

  {name: "Tell me how you handled a difficult situation.", content: "Tell me how you handled a difficult situation.", user_id: nil, difficulty: "", link: "http://www.glassdoor.com/blog/common-interview-questions/", tag_id: nil},

  {name: "Why should we hire you?", content: "Why should we hire you?", user_id: nil, difficulty: "", link: "http://www.glassdoor.com/blog/common-interview-questions/", tag_id: nil},

  {name: "Why are you looking for a new job?", content: "Why are you looking for a new job?", user_id: nil, difficulty: "", link: "http://www.glassdoor.com/blog/common-interview-questions/", tag_id: nil},

  {name: "Would you work holidays/weekends?", content: "Would you work holidays/weekends?", user_id: nil, difficulty: "", link: "http://www.glassdoor.com/blog/common-interview-questions/", tag_id: nil},

  {name: "How would you deal with an angry or irate customer?", content: "How would you deal with an angry or irate customer?", user_id: nil, difficulty: "", link: "http://www.glassdoor.com/blog/common-interview-questions/", tag_id: nil},

  {name: "What are your salary requirements? (Hint: if you’re not sure what’s a fair salary range and compensation package, research the job title and/or company on Glassdoor.)", content: "What are your salary requirements? (Hint: if you’re not sure what’s a fair salary range and compensation package, research the job title and/or company on Glassdoor.)", user_id: nil, difficulty: "", link: "http://www.glassdoor.com/blog/common-interview-questions/", tag_id: nil},

  {name: "Give a time when you went above and beyond the requirements for a project.", content: "Give a time when you went above and beyond the requirements for a project.", user_id: nil, difficulty: "", link: "http://www.glassdoor.com/blog/common-interview-questions/", tag_id: nil},

  {name: "Who are our competitors?", content: "Who are our competitors?", user_id: nil, difficulty: "", link: "http://www.glassdoor.com/blog/common-interview-questions/", tag_id: nil},

  {name: "What was your biggest failure?", content: "What was your biggest failure?", user_id: nil, difficulty: "", link: "http://www.glassdoor.com/blog/common-interview-questions/", tag_id: nil},

  {name: "What motivates you?", content: "What motivates you?", user_id: nil, difficulty: "", link: "http://www.glassdoor.com/blog/common-interview-questions/", tag_id: nil},

  {name: "What’s your availability?", content: "What’s your availability?", user_id: nil, difficulty: "", link: "http://www.glassdoor.com/blog/common-interview-questions/", tag_id: nil},

  {name: "Who’s your mentor?", content: "Who’s your mentor?", user_id: nil, difficulty: "", link: "http://www.glassdoor.com/blog/common-interview-questions/", tag_id: nil},

  {name: "Tell me about a time when you disagreed with your boss.", content: "Tell me about a time when you disagreed with your boss.", user_id: nil, difficulty: "", link: "http://www.glassdoor.com/blog/common-interview-questions/", tag_id: nil},

  {name: "How do you handle pressure?", content: "How do you handle pressure?", user_id: nil, difficulty: "", link: "http://www.glassdoor.com/blog/common-interview-questions/", tag_id: nil},

  {name: "What is the name of our CEO?", content: "What is the name of our CEO?", user_id: nil, difficulty: "", link: "http://www.glassdoor.com/blog/common-interview-questions/", tag_id: nil},

  {name: "What are your career goals?", content: "What are your career goals?", user_id: nil, difficulty: "", link: "http://www.glassdoor.com/blog/common-interview-questions/", tag_id: nil},

  {name: "What gets you up in the morning?", content: "What gets you up in the morning?", user_id: nil, difficulty: "", link: "http://www.glassdoor.com/blog/common-interview-questions/", tag_id: nil},

  {name: "What would your direct reports say about you?", content: "What would your direct reports say about you?", user_id: nil, difficulty: "", link: "http://www.glassdoor.com/blog/common-interview-questions/", tag_id: nil},

  {name: "What were your bosses’ strengths/weaknesses?", content: "What were your bosses’ strengths/weaknesses?", user_id: nil, difficulty: "", link: "http://www.glassdoor.com/blog/common-interview-questions/", tag_id: nil},

  {name: "If I called your boss right now and asked him what is an area that you could improve on, what would he say?", content: "If I called your boss right now and asked him what is an area that you could improve on, what would he say?", user_id: nil, difficulty: "", link: "http://www.glassdoor.com/blog/common-interview-questions/", tag_id: nil},

  {name: "Are you a leader or a follower?", content: "Are you a leader or a follower?", user_id: nil, difficulty: "", link: "http://www.glassdoor.com/blog/common-interview-questions/", tag_id: nil},

  {name: "What was the last book you’ve read for fun?", content: "What was the last book you’ve read for fun?", user_id: nil, difficulty: "", link: "http://www.glassdoor.com/blog/common-interview-questions/", tag_id: nil},

  {name: "What are your co-worker pet peeves?", content: "What are your co-worker pet peeves?", user_id: nil, difficulty: "", link: "http://www.glassdoor.com/blog/common-interview-questions/", tag_id: nil},

  {name: "What are your hobbies?", content: "What are your hobbies?", user_id: nil, difficulty: "", link: "http://www.glassdoor.com/blog/common-interview-questions/", tag_id: nil},

  {name: "What is your favorite website?", content: "What is your favorite website?", user_id: nil, difficulty: "", link: "http://www.glassdoor.com/blog/common-interview-questions/", tag_id: nil},

  {name: "What makes you uncomfortable?", content: "What makes you uncomfortable?", user_id: nil, difficulty: "", link: "http://www.glassdoor.com/blog/common-interview-questions/", tag_id: nil},

  {name: "What are some of your leadership experiences?", content: "What are some of your leadership experiences?", user_id: nil, difficulty: "", link: "http://www.glassdoor.com/blog/common-interview-questions/", tag_id: nil},

  {name: "How would you fire someone?", content: "How would you fire someone?", user_id: nil, difficulty: "", link: "http://www.glassdoor.com/blog/common-interview-questions/", tag_id: nil},

  {name: "What do you like the most and least about working in this industry?", content: "What do you like the most and least about working in this industry?", user_id: nil, difficulty: "", link: "http://www.glassdoor.com/blog/common-interview-questions/", tag_id: nil},

  {name: "Would you work 40+ hours a week?", content: "Would you work 40+ hours a week?", user_id: nil, difficulty: "", link: "http://www.glassdoor.com/blog/common-interview-questions/", tag_id: nil},

  {name: "What questions haven’t I asked you?", content: "What questions haven’t I asked you?", user_id: nil, difficulty: "", link: "http://www.glassdoor.com/blog/common-interview-questions/", tag_id: nil},

  {name: "What questions do you have for me?", content: "What questions do you have for me?", user_id: nil, difficulty: "", link: "http://www.glassdoor.com/blog/common-interview-questions/", tag_id: nil}
])
